[클래스의 개념]
1. 객체 지향 프로그램(OPP, Object-Oriented Programming)
    - 객체 지향 프로그래밍에서는 모든 데이터를 객체(object)로 취급한다.
        -> 객체의 상태(state)와 행동(behavior)을 구체화하는 형태의 프로그래밍이 객체 지향 프로그래밍이다.
        (객체를 만들기 위한 설계도 같은 개념을 '클래스(class)'라고 한다.)

2. 클래스(class)
    - 객체의 상태를 나타내는 필드(field)와 객체의 행동을 나타내는 메소드(method)로 구성된다.
      즉, 필드(field)란 클래스에 포함된 변수(variable)를 의미한다.
      -> 메소드(method) : 어떠한 특정 작업을 수행하기 위한 명령문의 집합.

3. 인스턴스(instance)
    - 클래스를 사용하기 위해서는 해당 클래스 타입의 객체(boject)를 선언해야 한다.
        - 객체를 선언 하는 과정을 '클래스의 인스턴스 화' 라고 한다.
        - 해당 클래스의 타입의 객체를 '인스턴스(instance)' 라고 한다.
            (인스턴스 = 메모리에 할당된 객체)
    
4. 메소드(method)
    - 클래스는 멤버(member)로 속성을 표현하는 필드(field)와 기능을 표현하는 메소드(method)를 가진다.
        -> 메소드(method)는 어떠한 특정 작업을 수행하기 위한 명령문의 집합.

    - 하나의 클래스에 같은 이름의 메소드를 2개 이상 정의할수 없다.
        - 단, 메소드 오버로딩(overloading)을 이용하면, 같은 이름의 메소드를 중복하여 정의할 수 있다.
            (메소드 오버로딩(overloading) = 매개 변수의 개수나 타입을 다르게 하여 같은 이름의 또 다른 메소드를 작성하는 것)
    

    ex) 문법
        접근제어자 반환타입 메소드이름(매개변수목록) { // 선언부
            // 구현부
        }
        
        1) 접근 제어자 : 해당 메소드에 접근할 수 있는 범위를 명시
        2) 반환 타입(return type) : 메소드가 모든 작업을 마치고 반환하는 데이터의 타입을 명시
        3) 메소드 이름 : 메소드를 호출하기 위한 이름을 명시
        4) 매개변수 목록(parameters) : 메소드 호출 시에는 전달되는 인수의 값을 저장할 변수들을 명시
        5) 구현부 : 메소드의 고유 기능을 수행하는 명령문의 집합



5. 클래스의 예)
    클래스(class)
        - 차(car) : 설계도

    필드(field)
        - car.modelName = "아반떼"
        - car.modelyear = 2016
        - car.color = "흰색"
        - car.maxSpeed = 250

    메소드(method)
        - car.accelerate()
        - car.brake()

    인스턴스(instance)
        - 내 차(myCar) : 설계도에 의해 생산된 차량
        - 친구 차(friendCar) : 설계도에 의해 생산된 또 다른 차량

    - 자동차 인스턴스는 모두 같은 필드와 메소드를 가지게 된다.
        단, 각 인스턴스마다 가지고 잇는 프로퍼티의 값은 전부 다를것이다.