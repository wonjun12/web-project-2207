[메소드 기본]
    - 객체의 동작에 해당하는 함수다.
    - 필드를 읽고 수정하는 역할도 하지만, 다른 객체를 생성해서 다양한 기능을 수행하기도 한다.
    - 객체 같의 데이터 전달의 수단으로 사용된다.
    - 외부로부터 매개값을 받을 수 있고, 값을 리턴할 수도 있다.


[메소드 이름 규칙]
    - 숫자로 시작하면 안되고, $와_를 제외한 특수문자를 사용하지 말아야 한다.
    - 관례적으로 메소드명은 '소문자'로 작성한다.
    - 서로 다른 단어가 혼합된 이름이라면 뒤이어 오는 단어의 첫머리 글자는 대문자로 작성한다. ex) getName() {}


[메소드 선언]
    - 선언부(리턴타입, 메소드이름, 매개변수선언) 으로 구성된다.

        ex) 리턴타입 메소드이름 ([매개변수선언, ---]) {
            실행할 코드를 작성하는 곳.         <-----------메소드 실행 블록
        } 

        ex2) 
            void powerOn() {}
            double divide(int x, int y) {}
            ↓↓↓
        실행)
            powerOn();
            double number = divide(x, y);


[매개 변수 선언]
    - 메소드가 실행할 때 필요한 데이터를 외부로부터 받기 위해 사용된다.
        -> 필요한 경우가 있고 필요없는 경우가 있다.


[매개 변수의 수를 모를 경우]
    - 몇 개의 매개 변수를 둬야 하는지 모를때 '배열'을 이용하여 사용한다.

    ex)
        int plusNumberArray(int[] x){
            int sum = 0;
            for(int i = 0; i < x.length; i++){ //입력한 x만큼 반복
                sum += x[i];
            }
            return sum;
        }


[리턴(return) 문]
    - 메소드 선언에 리턴 타입이 있는 메소드는 반드시 리턴(return)문을 사용해서 리턴값을 지정해야 한다.
    - 리턴(return)문이 실행되면 메소드는 즉시 종료된다.
    - return문의 리턴값은 리턴 타입이거나 리턴 타입으로 변환될 수 있어야 한다.
        (byte로 입력받아서 int의 값으로 return 가능)
    - return문 이후에 실행문이 나오면 "Unreachable code" 컴파일 오류가 나온다.


[리턴값이 없는 메소드 (void)]
    - return 값이 없는 메소드 에서도 return문을 사용할수 있다.
        ex) return;
            -> 해당 명령어 사용시 메소드는 강제로 종료 된다.


[메소드 호출]  
    - 클래스 내-외부의 호출에 의해 실행된다.
    - 클래스 내부의 다른 메소드에서 호출할 경우에는 메소드 이름으로 호출하면 된다.
    - 클래스 외부에서 호출할 경우에는 우선 클래스로부터 객체를 생성한 뒤, 참조 변수를 이용해서 메소드를 호출해야 한다.
    - 클래스 내부에서 호출할 경우 '메소드의 위치는 상관없다.'


[메소드 오버로딩]
    - 클래스 내에 같은 이름의 메소드를 여러 개 선언하는 것을 메소드 오버로딩(overloading)이라고 한다.
        -> 조건 : 매개 변수의 타입, 개수, 순서 중 하나가 달라야 한다.
    ex)
        리턴 타입 / 메소드 이름 / (타입 변수, ---) {}
            ↑           ↑           ↑
           무관        동일         매개 변수의 타입, 개수, 순서 중 하나가 달라야함.
            ↓           ↓           ↓
        리턴 타입 / 메소드 이름 / (타입 변수, ---) {}
        