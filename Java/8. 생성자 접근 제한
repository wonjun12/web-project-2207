[public] = 접근 제한 제일 약함
    - 모든 패키지에서 아무런 제한 없이 생성자를 호출할 수 있도록 한다.
        생성자가 public 접근 제한을 가진다면 클래스도 public 접근 제한을 가지는 것이 정상적이다.
        클래스가 default 접근 제한을 가진다면 클래스 사용이 같은 패키지로 한정되므로, 생성자가 public 접근 제한을 가지더라도 같은 패키지에서만 생성자를 호출할 수 있다.
    1) 적용 대상 : 클래스, 필드, 생성자, 메소드
    2) 접근 할 수 없는 클래스 : 없음

[portected]
    - default 접근 제한과 마찬가지로 같은 패키지에 속하는 클래스에서 생성자를 호출할 수 있도록 한다.
        차이점은 다른 패키지에 속한 클래스가 해당 클래스의 자식(child) 클래스라면 생성자를 호출할 수 있다.
    1) 적용 대상 : 필드, 생성자, 메소드
    2) 접근 할 수 없는 클래스 : 자식 클래스가 아닌 다른 패키지에 소속된 클래스

[default]
    - 선언할때 public 또는 private를 생략했다면 생성자는 default 접근 제한을 가진다.
        같은 패키지에서는 제한 없이 생성자를 호출할 수 있으나, 다른 패키지에서는 생성자를 호출할 수 없도록 한다.
    1) 적용 대상 : 클래스, 필드, 생성자, 메소드
    2) 접근 할 수 없는 클래스 : 다른 패키지에 소속된 클래스

[private] = 접근 제한 제일 강함
    - 동일 패키지이건 다른 패키지이건 상관없이 생성자를 호출하지 못하도록 제한한다.
        클래스 외부에서 new 연산자로 객체를 만들수 없다.
        클래스 내부에서만 생성자를 호출할 수 있고, 객체를 만들수 있다.
    1) 적용 대상 : 필드, 생성자, 메소드
    2) 접근 할 수 없는 클래스 : 모든 외부 클래스

[접근 제어자 사용 이유 => 멤버 즉,메소드와 필드에 주로 사용된다.]
    - 필드에도 접근 제한 을 작성할 수 있으며, 생성자로 초기화할때 초기화 이후 더이상 접근 하게 못하도록 해서 값을 
        변경하지 못하게 하는 게 사용 이유다.

[클래스 접근 제어자]
    - public과 default 2가지 밖에 없다.
        1)public = 다른 패키지의 클래스 사용 가능
            - 하나의 소스코드 안에는 하나의 public 클래스만 존재할수 있다.
        2) default = 같은 패키지의 클래스 사용 가능